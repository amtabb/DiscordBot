#updated code

import discord
import os
import requests
import json
import random
from keep_alive import keep_alive
from replit import db

from discord.ext import commands
#from discord.ext import when_mentioned_or

prefix = "s!"
bot = commands.Bot(prefix)

# Command stuffs
@bot.command()
async def ping(ctx):
	await ctx.channel.send("PogChamp")

#new say command 
@bot.command()
async def say(ctx, *, text=''):
    if text == '':
        await ctx.send("please don't leave it blank")
    else:
        await ctx.send(text)
        await ctx.message.delete()

# fun/social command(s)
@bot.command(aliases=['8ball'])
async def _8ball(ctx, *, question):
  responses = ['it is certain.',
               'it is decidedly so.',
               "Without a doubt.",
               "Yes, definitely.",
               "You may rely on it.",
               "As I see it, yes.",
               "Most likely.",
               "Outlook good.",
               "Yes.",
               "Signs point to yes.",
               "Reply hazy, try again.",
               "Ask again later.",
               "Better not tell you now.",
               "Cannot predict now.",
               "Concentrate and ask again.",
               "Don't count on it.",
               "My reply is no.",
               "My sources say no.",
               "Outlook not so good.",
               "Very doubtful."]
  await ctx.send(f"question: {question}\nAnswer: {random.choice(responses)}")

# Prefix Commands
if "responding" not in db.keys():
  db["responding"] = True

def get_quote():
  response = requests.get("https://zenquotes.io/api/random")
  json_data = json.loads(response.text)
  quote = json_data[0]["q"] + " -" + json_data[0]["a"]
  return(quote)

@bot.event
async def on_ready():
  print("We have logged in as {0.user}".format(bot))

@bot.event
async def on_message(message):
  if message.author == bot.user:
    return

  msg = message.content

  # message content but as a list and lowered for proper keyword detection
  msg_tolowered = [word_to_lower.lower() for word_to_lower in msg.split(" ")]

  if msg.startswith("s!inspire"):
    quote = get_quote()
    await message.channel.send(quote)

  if msg.startswith("s!responding"):
    value = msg.split("s!responding", 1)[1]

    if value.lower() == "true":
      db["responding"] = True
      await message.channel.send("Responding is on.")
    else:
      db["responding"] = False
      await message.channel.send("Responding is off.")

  # Conversation command big pain
  if msg.startswith("umeko"):
    await message.channel.send("hi hi")
    if msg.startswith("how are you?"):
     await message.channel.send("good, you?")

  if msg.startswith("Umeko"):
    await message.channel.send("hi hi")
  
  if "dragon" in msg:
    dragon_id = bot.get_emoji(787673213261185054)
    await message.channel.send("{emoji}".format(emoji = dragon_id))

  #i s2g xd
  # what a crappy implement LMAO
  if "sad" in msg:
    for word in msg_tolowered:
      if word == "sad":
        await message.channel.send("https://tenor.com/view/slap-handaseishuu-narukotoishi-barakamonanime-barakamon-gif-5509136")

  if "uwu" in msg_tolowered:
    await message.channel.send("UwU")

  #For processing @bot.commands decorator
  await bot.process_commands(message)

keep_alive()
bot.run(os.getenv("TOKEN"))